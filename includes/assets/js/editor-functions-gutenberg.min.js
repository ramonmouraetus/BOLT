/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/editor-functions-gutenberg.js":
/*!**********************************************!*\
  !*** ./src/js/editor-functions-gutenberg.js ***!
  \**********************************************/
/***/ (() => {

eval("function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nvar registerBlockType = wp.blocks.registerBlockType;\nvar _wp$components = wp.components,\n  SelectControl = _wp$components.SelectControl,\n  RangeControl = _wp$components.RangeControl,\n  Spinner = _wp$components.Spinner,\n  TextControl = _wp$components.TextControl,\n  CheckboxControl = _wp$components.CheckboxControl;\nconsole.log('jujuju');\nregisterBlockType(\"bolt-unum/add-cta-button\", {\n  title: \"Botão CTA\",\n  icon: {\n    // Renderizar um componente com a imagem\n    src: wp.element.createElement(\"img\", {\n      src: window.bolt_theme_defaut_location + \"/assets/img/cta.png\",\n      alt: \"Icone CTA\",\n      style: {\n        width: \"24px\",\n        height: \"24px\"\n      } // Ajustar o tamanho do ícone\n    })\n  },\n  category: \"common\",\n  // Categoria do bloco\n  attributes: {\n    url: {\n      type: \"string\",\n      \"default\": \"\"\n    },\n    label: {\n      type: \"string\",\n      \"default\": \"\"\n    },\n    blank: {\n      type: \"boolean\",\n      \"default\": false\n    },\n    id: {\n      type: \"string\",\n      \"default\": \"\"\n    }\n  },\n  edit: function edit(props) {\n    var _props$attributes = props.attributes,\n      url = _props$attributes.url,\n      label = _props$attributes.label,\n      blank = _props$attributes.blank,\n      id = _props$attributes.id,\n      setAttributes = props.setAttributes;\n    if (!id) setAttributes({\n      id: 'btn-brius-' + Date.now()\n    });\n    return wp.element.createElement(\"div\", {}, wp.element.createElement(\"h3\", {}, \"Botão CTA\"), wp.element.createElement(TextControl, {\n      label: \"URL de Destino\",\n      value: url,\n      placeholder: \"Digite a URL\",\n      onChange: function onChange(newUrl) {\n        setAttributes({\n          url: newUrl\n        });\n      }\n    }), wp.element.createElement(TextControl, {\n      label: \"Texto do Botão\",\n      value: label,\n      placeholder: \"Digite o texto do botão\",\n      onChange: function onChange(newLabel) {\n        setAttributes({\n          label: newLabel\n        });\n      }\n    }), wp.element.createElement(CheckboxControl, {\n      label: \"Abrir em nova guia?\",\n      checked: blank,\n      onChange: function onChange(newBlank) {\n        setAttributes({\n          blank: newBlank\n        });\n      }\n    }));\n  },\n  save: function save(props) {\n    var _props$attributes2 = props.attributes,\n      url = _props$attributes2.url,\n      label = _props$attributes2.label,\n      blank = _props$attributes2.blank,\n      id = _props$attributes2.id;\n    return \"[button url=\\\"\".concat(url, \"\\\" blank=\\\"\").concat(blank, \"\\\" id=\\\"\").concat(id, \"\\\"]\").concat(label, \"[/button]\");\n  },\n  transforms: {\n    from: [{\n      type: 'shortcode',\n      tag: 'button',\n      // Nome do shortcode a ser transformado\n      transform: function transform(attributes) {\n        console.log('Transforming shortcode attributes:', attributes);\n\n        // Crie o bloco com os atributos extraídos do shortcode\n        return createBlock('bolt-unum/add-cta-button', {\n          url: attributes.url || '',\n          label: attributes.content || '',\n          blank: attributes.blank === 'true',\n          id: attributes.id || ''\n        });\n      }\n    }]\n  }\n});\nregisterBlockType(\"bolt-unum/add-youtube-video\", {\n  title: \"Adicionar Vídeo do YouTube\",\n  icon: \"youtube\",\n  category: \"common\",\n  // Categoria do bloco\n  attributes: {\n    videoUrl: {\n      type: \"string\",\n      \"default\": \"\"\n    }\n  },\n  edit: function edit(props) {\n    var videoUrl = props.attributes.videoUrl,\n      setAttributes = props.setAttributes;\n    return wp.element.createElement(\"div\", {}, wp.element.createElement(\"h3\", {}, \"Adicionar Vídeo do YouTube\"), wp.element.createElement(TextControl, {\n      label: \"URL do Vídeo\",\n      value: videoUrl,\n      placeholder: \"Digite a URL do vídeo\",\n      onChange: function onChange(newUrl) {\n        setAttributes({\n          videoUrl: newUrl\n        });\n      }\n    }), wp.element.createElement(\"div\", {}, wp.element.createElement(\"p\", {}, \"Preview do Vídeo:\"), videoUrl ? wp.element.createElement(\"iframe\", {\n      src: \"https://www.youtube.com/embed/\".concat(new URLSearchParams(new URL(videoUrl).search).get(\"v\")),\n      width: \"100%\",\n      height: \"315\",\n      frameBorder: \"0\",\n      allow: \"autoplay; encrypted-media\",\n      allowFullScreen: true\n    }) : wp.element.createElement(\"p\", {}, \"Insira uma URL válida de um vídeo do YouTube.\")));\n  },\n  save: function save(props) {\n    var videoUrl = props.attributes.videoUrl;\n    var videoId = new URLSearchParams(new URL(videoUrl).search).get(\"v\");\n    return \"[youtube_video v_id=\\\"\".concat(videoId, \"\\\"][/youtube_video]\");\n  }\n});\nwp.domReady(function () {\n  // Detecta o conteúdo do post\n  var content = wp.data.select('core/editor').getEditedPostContent();\n\n  // Regex para detectar o shortcode\n  var shortcodeRegex = /\\[button\\s+(.*?)\\](.*?)\\[\\/button\\]/g;\n  var match;\n  // Processa todos os shortcodes no conteúdo\n  var _loop = function _loop() {\n    var attributesString = match[1];\n    var label = match[2];\n\n    // Analisa os atributos do shortcode\n    var attributes = {};\n    attributesString.split(/\\s+/).forEach(function (attr) {\n      var _attr$split = attr.split('='),\n        _attr$split2 = _slicedToArray(_attr$split, 2),\n        key = _attr$split2[0],\n        value = _attr$split2[1];\n      attributes[key] = value.replace(/['\"]/g, ''); // Limpa as aspas\n    });\n\n    // Cria o bloco com os atributos do shortcode\n    var block = wp.blocks.createBlock('bolt-unum/add-cta-button', {\n      url: attributes.url || '',\n      label: label || '',\n      blank: attributes.blank === 'true',\n      id: attributes.id || ''\n    });\n\n    // Substitui o conteúdo do post com o bloco criado\n    wp.data.dispatch('core/editor').insertBlocks(block);\n  };\n  while ((match = shortcodeRegex.exec(content)) !== null) {\n    _loop();\n  }\n});\n\n//# sourceURL=webpack://bolt/./src/js/editor-functions-gutenberg.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/editor-functions-gutenberg.js"]();
/******/ 	
/******/ })()
;